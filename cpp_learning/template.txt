C++模板（templates）是一种在C++编程语言中用来实现泛型编程（generic programming）的工具。泛型编程允许编写与特定数据类型无关的通用代码，使得代码更加灵活和可重用。

使用模板，你可以编写函数模板（function templates）和类模板（class templates）。函数模板允许你编写一个通用的函数，可以用于多种数据类型，而不需要为每种数据类型都编写一个单独的函数。类模板则允许你编写一个通用的类，可以用于多种数据类型或数据结构。

模板的使用方式是在编写函数或类的时候，使用参数化类型（parameterized types）代替具体的数据类型。这些参数化类型在使用时会被实际的数据类型替换，从而生成特定类型的函数或类。

例如，下面是一个简单的C++函数模板示例，用于比较两个值的大小：

template <typename T>
T max(T a, T b) {
    return (a > b) ? a : b;
}
在这个例子中，typename T 表示这是一个模板，T 是一个类型参数。函数 max 接受两个类型为 T 的参数 a 和 b，然后返回这两个值中较大的那个。

通过使用模板，你可以将这个函数应用于任何类型的数据，包括整数、浮点数、字符串等。例如：

int main() {
    int intMax = max(3, 7); // 调用 max 函数，T 被推断为 int
    double doubleMax = max(4.5, 2.3); // T 被推断为 double
    std::string stringMax = max("apple", "orange"); // T 被推断为 std::string
    return 0;
}
这样，模板使得你可以编写出通用的、可复用的代码，同时保持代码的类型安全性和性能。